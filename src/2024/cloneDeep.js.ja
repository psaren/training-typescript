const isReference = (o) => typeof o === 'object' && o !== null || typeof o === 'function';

const cloneDeep = (obj) => {
  const cacheMap = new WeakMap();
  const cloneBase = (obj) => {
    if (isReference(obj)) {
      if (obj instanceof Date) return new Date(obj);
      if (obj instanceof RegExp) return new RegExp(obj);
      return cloneReference(obj);
    }
    return obj;
  };
  const cloneReference = (obj) => {
    if (cacheMap.has(obj)) {
      return cacheMap.get(obj)
    }
    const c = new obj.constructor();
    cacheMap.set(obj, c);

    if (obj instanceof Map) {
      obj.forEach((value, key) => {
        c.set(cloneBase(key),cloneBase(value));
      });
    }
    if (obj instanceof Set) {
      obj.forEach(value => {
        c.add(value);
      });
    }
    const keys = Object.keys(obj).concat(Object.getOwnPropertySymbols(obj));
    keys.forEach((k) => {
      c[k] = cloneBase(obj[k]);
    });
    return c;
  };
  return cloneBase(obj);
};

/****** test ******/
const s = Symbol('s')
const a = {
  num: 1,
  str: 'string',
  [s]: 'symbol',
  map: new Map(),
  set: new Set([1,2,3]),
  boolean: true,
  reg: /hello/gim,
  func: function a() { },
  und: undefined,
  null: null,
  sym: Symbol()
}

a['self'] = a
console.log(`cloneDeep(a)`, cloneDeep(a))

function shallowClone(obj) {
  const newObj = {};
  for(let prop in obj) {
    if(obj.hasOwnProperty(prop)){
      newObj[prop] = obj[prop];
    }
  }
  return newObj;
}

const obj1 = {
  name : 'init',
  arr : [1,[2,3],4],
};
const obj3 = shallowClone(obj1) // 一个浅拷贝方法
obj3.name = "update";
obj3.arr[1] = [5,6,7] ; // 新旧对象还是共享同一块内存
console.log('obj1',obj1) // obj1 { name: 'init', arr: [ 1, [ 5, 6, 7 ], 4 ] }
console.log('obj3',obj3) // obj3 { name: 'update', arr: [ 1, [ 5, 6, 7 ], 4 ] }